{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_FIELD_ALPHABETICALLY","SORT_FIELD_LENGTH","App","_useState","useState","_useState2","_slicedToArray","sortField","setSortField","_useState3","_useState4","isReversed","setIsReversed","result","goods","goodsArray","_toConsumableArray","sort","a","b","localeCompare","length","reverse","sortBy","_jsxs","className","children","_jsx","onClick","type","cn","map","x","ReactDOM","render","document","getElementById"],"mappings":"iPAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAA4B,iBAC5BC,EAAoB,SAyBnB,IAAMC,EAAM,WACjB,IAAAC,EAAkCC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAAvCI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,EAAoCL,oBAAS,GAAMM,EAAAJ,YAAAG,EAAA,GAA5CE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAC1BG,EA1BR,SAAgBC,EAAOP,EAAWI,GAChC,IAAMI,EAAUC,YAAOF,GAmBvB,OAjBIP,GACFQ,EAAWE,MAAK,SAACC,EAAGC,GAClB,OAAQZ,GACN,KAAKP,EACH,OAAOkB,EAAEE,cAAcD,GACzB,KAAKlB,EACH,OAAOiB,EAAEG,OAASF,EAAEE,OACtB,QACE,OAAO,MAKXV,GACFI,EAAWO,UAGNP,EAMQQ,CAAOxB,EAAiBQ,EAAWI,GAElD,OACEa,eAAA,OAAKC,UAAU,kBAAiBC,SAAA,CAC9BF,eAAA,OAAKC,UAAU,UAASC,SAAA,CACtBC,cAAA,UACEC,QAAS,kBAAMpB,EAAaR,IAC5B6B,KAAK,SACLJ,UAAWK,IAAG,iBAAkB,CAC9B,GAAIvB,IAAcP,EAClB,WAAYO,IAAcP,IACzB0B,SACJ,wBAIDC,cAAA,UACEC,QAAS,kBAAMpB,EAAaP,IAC5B4B,KAAK,SACLJ,UAAWK,IAAG,oBAAqB,CACjC,GAAIvB,IAAcN,EAClB,WAAYM,IAAcN,IACzByB,SACJ,mBAIDC,cAAA,UACEC,QAAS,kBAAMhB,GAAeD,IAC9BkB,KAAK,SACLJ,UAAWK,IAAG,oBAAqB,CACjC,YAAanB,IACZe,SACJ,aAICnB,GAAaI,IACfgB,cAAA,UACEE,KAAK,SACLJ,UAAU,4BACVG,QAAS,WACPhB,GAAc,GACdJ,EAAa,KACbkB,SACH,aAMHC,cAAA,MAAAD,SACGb,EAAOkB,KAAI,SAAAC,GAAC,OACXL,cAAA,MACE,UAAQ,OAAMD,SAGbM,GAFIA,YCnGjBC,IAASC,OACPP,cAACzB,EAAG,IACJiC,SAASC,eAAe,W","file":"static/js/main.32e09253.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD_ALPHABETICALLY = 'alphabetically';\nconst SORT_FIELD_LENGTH = 'length';\n\nfunction sortBy(goods, sortField, isReversed) {\n  const goodsArray = [...goods];\n\n  if (sortField) {\n    goodsArray.sort((a, b) => {\n      switch (sortField) {\n        case SORT_FIELD_ALPHABETICALLY:\n          return a.localeCompare(b);\n        case SORT_FIELD_LENGTH:\n          return a.length - b.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    goodsArray.reverse();\n  }\n\n  return goodsArray;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReversed, setIsReversed] = useState(false);\n  const result = sortBy(goodsFromServer, sortField, isReversed);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortField(SORT_FIELD_ALPHABETICALLY)}\n          type=\"button\"\n          className={cn('button is-info', {\n            '': sortField === SORT_FIELD_ALPHABETICALLY,\n            'is-light': sortField !== SORT_FIELD_ALPHABETICALLY,\n          })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortField(SORT_FIELD_LENGTH)}\n          type=\"button\"\n          className={cn('button is-success', {\n            '': sortField === SORT_FIELD_LENGTH,\n            'is-light': sortField !== SORT_FIELD_LENGTH,\n          })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => setIsReversed(!isReversed)}\n          type=\"button\"\n          className={cn('button is-warning', {\n            'is-light': !isReversed,\n          })}\n        >\n          Reverse\n        </button>\n\n        {(sortField || isReversed) && (\n        <button\n          type=\"button\"\n          className=\"button is-danger is-light\"\n          onClick={() => {\n            setIsReversed(false);\n            setSortField('');\n          }}\n        >\n          Reset\n        </button>\n        )}\n      </div>\n\n      <ul>\n        {result.map(x => (\n          <li\n            data-cy=\"Good\"\n            key={x}\n          >\n            {x}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}